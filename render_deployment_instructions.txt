## Render Deployment Instructions for Plagiarism Checker

This guide will walk you through deploying your Plagiarism Checker application (React Frontend and Flask Backend) to Render.

### Prerequisites:
1.  A GitHub account with your project pushed to a repository.
2.  A Render account (sign up at [https://render.com/](https://render.com/)).

### Step 1: Deploy the Backend (Flask)

1.  **Log in to Render:** Go to [https://render.com/](https://render.com/) and log in to your account.
2.  **New Web Service:** Click on "New" -> "Web Service".
3.  **Connect to Git:** Connect your GitHub account (if you haven't already) and select the repository containing your Plagiarism Checker project.
4.  **Configure Web Service:**
    *   **Name:** `plagiarism-checker-backend` (or any name you prefer)
    *   **Region:** Choose a region close to you or your users.
    *   **Branch:** `main` (or your primary branch)
    *   **Root Directory:** `backend` (This is crucial, as your Flask app is in the `backend` folder)
    *   **Runtime:** `Python 3`
    *   **Build Command:** `pip install -r requirements.txt`
    *   **Start Command:** `gunicorn main:app` (Gunicorn is a production-ready WSGI server for Python. Render automatically installs it if not in requirements.txt, but it's good practice to include it.)
    *   **Instance Type:** `Free` (for testing, you can upgrade later)
5.  **Advanced (Environment Variables):** (Optional, but good practice for production)
    *   You might want to add `PYTHONUNBUFFERED=1` as an environment variable.
6.  **Create Web Service:** Click "Create Web Service".

Render will now build and deploy your backend. You can monitor the deployment logs. Once deployed, Render will provide you with a public URL for your backend service (e.g., `https://plagiarism-checker-backend.onrender.com`). **Copy this URL.**

### Step 2: Update Frontend to use Backend URL

1.  **Open `frontend/src/App.js`:** In your local project, open the file `frontend/src/App.js`.
2.  **Change Backend URL:** Locate the `fetch` call for the `/analyze` endpoint. It currently points to `http://localhost:5000`. **Replace `http://localhost:5000` with the public URL of your Render backend service** you copied in the previous step.
    *   Example: `const response = await fetch('https://plagiarism-checker-backend.onrender.com/analyze', {`
3.  **Commit and Push:** Save the changes to `App.js`, commit them, and push them to your GitHub repository.

### Step 3: Deploy the Frontend (React)

1.  **New Web Service:** In Render, click on "New" -> "Web Service" again.
2.  **Connect to Git:** Select the **same GitHub repository**.
3.  **Configure Web Service:**
    *   **Name:** `plagiarism-checker-frontend` (or any name you prefer)
    *   **Region:** Choose the same region as your backend.
    *   **Branch:** `main` (or your primary branch)
    *   **Root Directory:** `frontend` (This is crucial, as your React app is in the `frontend` folder)
    *   **Runtime:** `Node`
    *   **Build Command:** `npm install && npm run build`
    *   **Start Command:** `serve -s build` (Render will automatically install `serve` if not present. This command serves the static files generated by `npm run build`)
    *   **Instance Type:** `Free`
4.  **Create Web Service:** Click "Create Web Service".

Render will now build and deploy your frontend. Once deployed, Render will provide you with a public URL for your frontend service (e.g., `https://plagiarism-checker-frontend.onrender.com`).

### Step 4: Test Your Deployed Application

1.  Open the public URL of your frontend service in your browser.
2.  Try uploading two documents (PDF, DOCX, or TXT) and click "Analyze Plagiarism".
3.  The frontend should communicate with your deployed backend and display the similarity score.

### Important Notes:

*   **CORS:** The Flask backend has `Flask-Cors` enabled, which allows the frontend to make requests to it. If you encounter CORS issues, double-check your backend's CORS configuration.
*   **Environment Variables:** For production, it's recommended to manage sensitive information (like API keys, if any were used) using Render's environment variables feature instead of hardcoding them.
*   **Troubleshooting:** If you face issues, check the logs for both your backend and frontend services on Render. They provide valuable debugging information.

Good luck with your deployment!